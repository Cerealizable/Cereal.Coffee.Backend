# NOTE: update this with your service name
service: cereal-coffee-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-west-2

  # These environment variables are made available to our functions under process.env.
  environment:
    productsTableName: coffeeProducts
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
  
  # Permission policy for the Lambda function
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  # - authorizer: authenticate using the AWS IAM role
  productCreate:
    handler: products.create
    events:
      - http:
          path: products/create
          method: post
          cors: true
          authorizer: aws_iam
  productGet:
    handler: products.get
    events:
      - http:
          path: products/get/{id}
          method: get
          cors: true
          authorizer: aws_iam
  productList:
    handler: products.list
    events:
      - http:
          path: products/get
          method: get
          cors: true
          authorizer: aws_iam
  productUpdate:
    handler: products.update
    events:
      - http:
          path: products/update/{id}
          method: put
          cors: true
          authorizer: aws_iam
  productDel:
    handler: products.del
    events:
      - http:
          path: products/delete/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billingStripe:
    handler: billing.stripe
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  


