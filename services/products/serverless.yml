# NOTE: update this with your service name
service: cereal-coffee-app-2-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-pseudo-parameters 

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-cereal-coffee-shop-infra
  # # Set the table name here so we can use it while testing locally
  # tableName: ${self:custom.stage}-coffeeProducts

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions under process.env.
    # These environment variables are made available to our functions
  # under process.env.
  environment:
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  # - authorizer: authenticate using the AWS IAM role
  productCreate:
    handler: products.create
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer: aws_iam
  productGet:
    handler: products.get
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
          authorizer: aws_iam
  productList:
    handler: products.list
    events:
      - http:
          path: products
          method: get
          cors: true
          authorizer: aws_iam
  productUpdate:
    handler: products.update
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer: aws_iam
  productDel:
    handler: products.del
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billingStripe:
    handler: billing.stripe
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
  


